[
    {"index":0,"name":"XKCD","snippet":"<pre><span class=\"snippet-keyword\">const</span> fetch <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">require</span>('<span class=\"snippet-string\">node-fetch</span>');\n<span class=\"snippet-keyword\">module</span>.<span class=\"snippet-keyword\">exports</span> <span class=\"snippet-operator\">=</span> {\n\tname: '<span class=\"snippet-string\">comic</span>',\n\tdescription: '<span class=\"snippet-string\">Gives a XKCD comic</span>'\n\targs: <span class=\"snippet-constant\">false</span>,\n\t<span style=\"color: teal; \">execute</span>: <span class=\"snippet-keyword\">async</span>(<span class=\"snippet-function-argument\">message</span>, <span class=\"snippet-function-argument\">args</span>) <span class=\"snippet-keyword\">=></span>{\n\t\t<span class=\"snippet-keyword\">if</span>(<span class=\"snippet-operator\">!</span>args.length <span class=\"snippet-operator\">||</span> <span class=\"snippet-function\">isNaN</span>(args)){\n\t\t\t<span class=\"snippet-keyword\">const</span> {img} <span class=\"snippet-operator\">=</span> <span class=\"snippet-keyword\">await</span> <span class=\"snippet-function\">fetch</span>(`<span class=\"snippet-string\">https://xkcd.com/info.0.json</span>`).<span class=\"snippet-function\">then</span>(<span class=\"snippet-function-argument\">response</span> <span class=\"snippet-keyword\">=></span> response.json());\n\t\t\tmessage.channel.<span class=\"snippet-function\">send</span>(`<span class=\"snippet-string\">Here is the latest XKCD comic: ${img}</span>`);\n\t\t}\n\t\t<span class=\"snippet-keyword\">else</span>{\n\t\t\t<span class=\"snippet-keyword\">const</span> {img} <span class=\"snippet-operator\">=</span> <span class=\"snippet-keyword\">await</span> <span class=\"snippet-function\">fetch</span>(`<span class=\"snippet-string\">https://xkcd.com/</span>${args}<span class=\"snippet-string\">/info.0.json</span>`).<span class=\"snippet-function\">then</span>(<span class=\"snippet-function-argument\">response</span> <span class=\"snippet-keyword\">=></span> response.json());\n\t\t\tmessage.channel.<span class=\"snippet-function\">send</span>(`<span class=\"snippet-string\">Here is XKCD comic #</span>${args}<span class=\"snippet-string\">: </span>${img}`);\n\t\t}\n\t}\n};</pre>","description":"This snippet is from a basic Discord bot built using JavaScript and the Discord.js node module. The snippet above uses the fetch api to send a request to the XKCD website, and retrieve a comic page from it. The user can provide an argument to retrieve a specific comic, or leave it empty and get the latest comic."},
    {"index":1,"name":"Recover JPEGs","snippet":"<pre><span class=\"snippet-keyword\">#include</span> &lt;<span class=\"snippet-string\">stdio.h</span>&gt;\n<span class=\"snippet-keyword\">#include</span> &lt;<span class=\"snippet-string\">stdlib.h</span>&gt;\n<span class=\"snippet-keyword\">#include</span> &lt;<span class=\"snippet-string\">stdint.h</span>&gt;\n\n<span class=\"snippet-constant\">const</span> <span class=\"snippet-keyword\">int</span> CHUNK_SIZE <span class=\"snippet-operator\">=</span> <span class=\"snippet-function-argument\">512</span>;\n<span class=\"snippet-keyword\">int</span> main(<span class=\"snippet-keyword\">int</span> <span class=\"snippet-function-argument\">argc</span>, <span class=\"snippet-keyword\">char</span> *<span class=\"snippet-function-argument\">argv</span>[])\n{\n\t<span class=\"snippet-keyword\">char</span> filename[<span class=\"snippet-function-argument\">7</span>];\n\t<span class=\"snippet-keyword\">int</span> JPG_COUNTER = <span class=\"snippet-function-argument\">0</span>;\n\t<span class=\"snippet-function\">uint8_t</span> buffer[CHUNK_SIZE];\n\tFILE <span class=\"snippet-operator\">*</span>input <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">fopen</span>(argv[<span class=\"snippet-function-argument\">1</span>], \"<span class=\"snippet-string\">r</span>\");\n\t<span class=\"snippet-keyword\">while</span> (<span class=\"snippet-function\">fread</span>(buffer, CHUNK_SIZE, <span class=\"snippet-function-argument\">1</span>, input))\n\t{\n\t\t<span class=\"snippet-keyword\">if</span> (buffer[<span class=\"snippet-function-argument\">0</span>] <span class=\"snippet-operator\">==</span> <span class=\"snippet-function-argument\">0xff</span> <span class=\"snippet-operator\">&&</span> buffer[<span class=\"snippet-function-argument\">1</span>]<span class=\"snippet-operator\">==</span><span class=\"snippet-function-argument\">0xd8</span> <span class=\"snippet-operator\">&&</span> buffer[<span class=\"snippet-function-argument\">2</span>]<span class=\"snippet-operator\">==</span><span class=\"snippet-function-argument\">0xff</span> <span class=\"snippet-operator\">&&</span> (buffer[<span class=\"snippet-function-argument\">3</span>] <span class=\"snippet-operator\">&</span> <span class=\"snippet-function-argument\">0xf0</span>)<span class=\"snippet-operator\">==</span><span class=\"snippet-function-argument\">0xe0</span>)\n\t\t{\n\t\t\tJPG_COUNTER<span class=\"snippet-operator\">++</span>;\n\t\t\t<span class=\"snippet-function\">sprintf</span>(filename, \"<span class=\"snippet-keyword\">%03i</span><span class=\"snippet-string\">.jpg</span>\", JPG_COUNTER);\n\t\t\tFILE <span class=\"snippet-operator\">*</span>img = <span class=\"snippet-function\">fopen</span>(filename, \"<span class=\"snippet-string\">w</span>\");\n\t\t\t<span class=\"snippet-function\">fwrite</span>(<span class=\"snippet-operator\">&</span>buffer, CHUNK_SIZE, <span class=\"snippet-function-argument\">1</span>, img);\n\t\t\t<span class=\"snippet-function\">fclose</span>(img);\n\t\t}\n\t\t<span class=\"snippet-keyword\">else</span>\n\t\t{\n\t\t\tFILE <span class=\"snippet-operator\">*</span>img <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">fopen</span>(filename, \"<span class=\"snippet-string\">a</span>\");\n\t\t\t<span class=\"snippet-function\">fwrite</span>(<span class=\"snippet-operator\">&</span>buffer, CHUNK_SIZE, <span class=\"snippet-function-argument\">1</span>, img);\n\t\t\t<span class=\"snippet-function\">fclose</span>(img);\n\t\t}\n\t}\n\t<span class=\"snippet-function\">fclose</span>(input);\n}</pre>","description":"This snippet is from an online course I enrolled in. The code is in C. The code is for a program that would search through a corrupted file and save all JPG images and name them sequentially. The code reads the chunk headers of the data to see if it matches the chunk headers of a JPG file."},
    {"index":2,"name":"Regenerate encryption key","snippet":"<pre><span class=\"snippet-keyword\">def</span> <span class=\"snippet-method\">reset_cipher_key</span>():\n\told_key <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">read_ciph_key</span>(<span class=\"snippet-function\">get_confpath</span>())\n\tnew_key <span class=\"snippet-operator\">=</span> Fernet.<span class=\"snippet-function\">generate_key</span>()\n\t<span class=\"snippet-keyword\">with</span> <span class=\"snippet-function\">open</span>(<span class=\"snippet-function\">get_filepath</span>(), <span class=\"snippet-string\">'r'</span>) <span class=\"snippet-keyword\">as</span> f:\n\t\tdata <span class=\"snippet-operator\">=</span> json.<span class=\"snippet-function\">load</span>(f)\n\t<span class=\"snippet-keyword\">for</span> current_pass <span class=\"snippet-keyword\">in</span> <span class=\"snippet-function\">range</span>(<span class=\"snippet-function\">get_password_count</span>(<span class=\"snippet-function\">get_filepath</span>())):\n\t\told_encrypted <span class=\"snippet-operator\">=</span> data[<span class=\"snippet-string\"><span class=\"snippet-string\">'encrypted'</span></span>][current_pass][<span class=\"snippet-string\"><span class=\"snippet-string\">'encrypted'</span></span>]\n\t\told_encrypted <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">decrypt_password</span>(<span class=\"snippet-function\">bytes</span>(old_encrypted,<span class=\"snippet-string\">'UTF-8'</span>),old_key)\n\t\tnew_encrypted <span class=\"snippet-operator\">=</span> <span class=\"snippet-function\">encrypt_password</span>(old_encrypted,new_key)\n\t\tdata[<span class=\"snippet-string\"><span class=\"snippet-string\"><span class=\"snippet-string\">'UTF-8'</span></span></span>][current_pass][<span class=\"snippet-string\"><span class=\"snippet-string\"><span class=\"snippet-string\">'UTF-8'</span></span></span>] <span class=\"snippet-operator\">=</span> new_encrypted.<span class=\"snippet-function\">decode</span>(<span class=\"snippet-string\"><span class=\"snippet-string\"><span class=\"snippet-string\">'UTF-8'</span></span></span>)\n\t<span class=\"snippet-keyword\">with</span> <span class=\"snippet-function\">open</span>(<span class=\"snippet-function\">get_filepath</span>(),<span class=\"snippet-string\">'w'</span>) <span class=\"snippet-keyword\">as</span> w:\n\t\tjson.<span class=\"snippet-function\">dump</span>(data,w,<span class=\"snippet-function-argument\">indent</span> <span class=\"snippet-operator\">=</span> <span class=\"snippet-function-argument\">4</span>)\n\t<span class=\"snippet-function\">gen_key_file</span>(<span class=\"snippet-function\">get_confpath</span>(),new_key)</pre>","description":"This snippet is from the password management program I created. It takes the old key, unencrypts the passwords, re-encrypts them using a new key, and re-inserts them into the file. It then overwrites the old key with the new key."}
]